// Prisma schema pour "palais_des_festivals"
// généré par l'assistant

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccreditationStatus {
  ATTENTE
  ENTREE
  SORTIE
  NOUVEAU
  REFUS
  ABSENT
}

enum HistoryAction {
  CREATED
  STATUS_CHANGED
  VEHICLE_ADDED
  VEHICLE_REMOVED
  VEHICLE_UPDATED
  EMAIL_SENT
  INFO_UPDATED
  DELETED
}

model Accreditation {
  id          String               @id @default(uuid())
  createdAt   DateTime             @default(now())
  company     String
  stand       String
  unloading   String
  event       String
  message     String?
  consent     Boolean              @default(false)
  status      AccreditationStatus  @default(ATTENTE)
  entryAt     DateTime?
  exitAt      DateTime?
  email       String?              @db.VarChar(255)
  sentAt      DateTime?

  vehicles    Vehicle[]
  emailHistory AccreditationEmailHistory[]
  history     AccreditationHistory[]
}

model Vehicle {
  id              Int          @id @default(autoincrement())
  plate           String
  size            String
  phoneCode       String
  phoneNumber     String
  date            String
  time            String
  city            String
  unloading       String
  kms             String?

  accreditation   Accreditation @relation(fields: [accreditationId], references: [id], onDelete: Cascade)
  accreditationId String
}

model AccreditationEmailHistory {
  id              Int           @id @default(autoincrement())
  accreditation   Accreditation @relation(fields: [accreditationId], references: [id], onDelete: Cascade)
  accreditationId String
  email           String
  sentAt          DateTime      @default(now())
}

model AccreditationHistory {
  id              Int             @id @default(autoincrement())
  accreditation   Accreditation   @relation(fields: [accreditationId], references: [id], onDelete: Cascade)
  accreditationId String
  action          HistoryAction
  field           String?         // Champ modifié (ex: "status", "company", etc.)
  oldValue        String?         // Ancienne valeur
  newValue        String?         // Nouvelle valeur
  description     String          // Description lisible de l'action
  userId          String?         // ID de l'utilisateur qui a fait la modification
  userAgent       String?         // User agent pour tracer l'origine
  createdAt       DateTime        @default(now())
} 